document.addEventListener('DOMContentLoaded', () => {
    const chatBox = document.getElementById('chat-box');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');

    const renderInteractiveProductTable = (markdown) => {
        const lines = markdown.split('\n').filter(line => line.trim().startsWith('|') && !line.includes('---'));
        const headerLine = lines.find(line => line.includes('Producto') && line.includes('Precio')) || lines.shift();
        if (!headerLine) return markdown; // Fallback to old rendering

        const headers = headerLine.split('|').map(h => h.trim()).filter(Boolean);

        let tableHtml = `<table><thead><tr><th>${headers.join('</th><th>')}</th></tr></thead><tbody>`;

        lines.forEach((line, index) => {
            const parts = line.split('|').map(s => s.trim()).filter(Boolean);
            if (parts.length >= 2) {
                const productName = parts[0];
                const productPrice = parts[1];
                tableHtml += `
                    <tr>
                        <td>${productName}</td>
                        <td>${productPrice}</td>
                    </tr>
                `;
            }
        });

        tableHtml += '</tbody></table>';
        return tableHtml;
    };

    const renderMarkdownTable = (markdown) => {
        const tableRegex = /(?:^|\n)(\|.*?\|\s*\n\| *--- *\|.*(?:\n\|.*?\|.*)*)/;
        const match = markdown.match(tableRegex);

        if (!match) {
            return markdown;
        }

        const tableMarkdown = match[1].trim();
        const lines = tableMarkdown.split('\n').filter(line => line.trim().startsWith('|'));
        
        if (lines.length < 2) return markdown;

        let tableHtml = '<table style="width: 100%; border-collapse: collapse;">';
        const headerLine = lines.shift();
        const headers = headerLine.split('|').map(h => h.trim()).filter(Boolean);
        tableHtml += `<thead><tr><th style="border: 1px solid #ddd; padding: 8px; text-align: left;">${headers.join('</th><th style="border: 1px solid #ddd; padding: 8px; text-align: left;">')}</th></tr></thead>`;

        if (lines[0] && lines[0].includes('---')) lines.shift();

        tableHtml += '<tbody>';
        lines.forEach(line => {
            const cells = line.split('|').map(c => c.trim()).filter(Boolean);
            if (cells.length > 0) {
                tableHtml += `<tr><td style="border: 1px solid #ddd; padding: 8px;">${cells.join('</td><td style="border: 1px solid #ddd; padding: 8px;">')}</td></tr>`;
            }
        });
        tableHtml += '</tbody></table>';
        
        // Replace the markdown table with the generated HTML table
        // This part needs careful adjustment based on how the markdown is embedded in the original text
        // For now, we'll assume the markdown table is at the beginning of the text or can be replaced directly
        // A more robust solution might involve finding the exact markdown table string within the original markdown
        return markdown.substring(0, markdown.indexOf('|')) + tableHtml;
    };

    const addMessage = (text, sender) => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', `${sender}-message`);
        
        const p = document.createElement('div');

        // Determine the type of table to render
        const isProductList = sender === 'bot' && text.includes('| Producto') && text.includes('| Precio');
        const isProformaTable = sender === 'bot' && (
            (text.includes('| Cantidad') && text.includes('| Total')) ||
            (text.includes('| Nombre') && text.includes('| Cantidad') && (text.includes('Precio unitario') || text.includes('| Subtotal')))
        );

        if (isProductList) {
            p.innerHTML = renderInteractiveProductTable(text);
        } else if (isProformaTable) {
            p.innerHTML = renderMarkdownTable(text);
        } else {
            // Normal rendering for text and links
            let html = text;
            html = html.replace(/(\/proforma\?download=1)/g, '<a href="$1" download>Descargar Proforma</a>');
            html = html.replace(/(\/proforma\b)(?!\?download=1)/g, '<a href="$1" target="_blank">Ver Proforma en nueva pesta침a</a>');
            html = html.replace(/(tel:[+\d][+\d\-\s()]*)/g, '<a href="$1">Llamar ahora</a>');
            p.innerHTML = html.replace(/\n/g, '<br>');
        }

        messageElement.appendChild(p);
        chatBox.appendChild(messageElement);
        chatBox.scrollTop = chatBox.scrollHeight;
    };

    // Improved version that adds download and tel: links in addition to /proforma
    const addMessageEnhanced = (text, sender) => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', `${sender}-message`);

        const p = document.createElement('div');

        const isProductList = sender === 'bot' && text.includes('| Producto') && text.includes('| Precio');
        const isProformaTable = sender === 'bot' && text.includes('| Cantidad') && text.includes('| Total');

        if (isProductList) {
            p.innerHTML = renderInteractiveProductTable(text);
        } else if (isProformaTable) {
            p.innerHTML = renderMarkdownTable(text);
        } else {
            let html = text;
            html = html.replace(/(\/proforma\?download=1)/g, '<a href="$1" download>Descargar Proforma</a>');
            html = html.replace(/(\/proforma\b)(?!\?download=1)/g, '<a href="$1" target="_blank">Ver Proforma en nueva pesta침a</a>');
            html = html.replace(/(tel:[+\d][+\d\-\s()]*)/g, '<a href="$1">Llamar ahora</a>');
            p.innerHTML = html.replace(/\n/g, '<br>');
        }

        messageElement.appendChild(p);
        chatBox.appendChild(messageElement);
        chatBox.scrollTop = chatBox.scrollHeight;
    };

    const handleSendMessage = async () => {
        const message = userInput.value.trim(); // Keep this for user-typed messages
        if (message === '') return;

        addMessageEnhanced(message, 'user');
        userInput.value = '';

        try {
            const response = await fetch('/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Error en la respuesta del servidor.');
            }

            const data = await response.json();
            addMessage(data.reply || 'No se recibi칩 una respuesta v치lida.', 'bot');

        } catch (error) {
            console.error('Error al enviar mensaje:', error);
            addMessageEnhanced('Lo siento, no puedo responder en este momento.', 'bot');
        }
    };

    sendBtn.addEventListener('click', handleSendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            handleSendMessage();
        }
    });
});
